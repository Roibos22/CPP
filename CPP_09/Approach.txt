# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Approach.txt                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: lgrimmei <lgrimmei@student.42berlin.de>    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/04/26 16:07:57 by lgrimmei          #+#    #+#              #
#    Updated: 2024/05/06 23:48:31 by lgrimmei         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

================================================================================
Exercise 00 Bitcoin Exchange
================================================================================

- i do not need to add or delete things after creation
- i create the container by adding to the top always
- i need to access them easily, by date
	
	-> map
		- key (date) value (price) pairs
		- fast lookup by keys
		- also sorted

1. convert db into map
2. read in file as map (maybe nultimap)
	- validate file
		- validate format "date | value"
		- validate date Year-Month-Day
		- validate value a float or a positive integer, between 0 and 1000.
3. ...

================================================================================
Exercise 01 Reverse Polish Notation
================================================================================

- easy access in front
- easy popping and adding new

	-> stack

================================================================================
Exercise 02 PmergeMe
================================================================================

	-> deque
	-> vector


	1 Number -> 0 JT Numbers
	2        -> 1
	3        -> 2
	4        -> 2
	5        -> 3
	6        -> 3